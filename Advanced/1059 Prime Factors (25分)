#include<stdio.h>
#include<math.h>
struct {
  int prime_num;
  int count;
}factor[10];
bool qnum[100010]={0};
int prime[100010]={0};
int factor_num=0;
int Prime_List()
{
  int num=0;
  for(int i=2;i<100010;i++)
  if(qnum[i]==false)
  {
    for(int j=i+i;j<100010;j+=i)
    qnum[j]=true;
    prime[num++]=i;
  }
  return num;
}
int Find_Factor(int sqr,int num,int n)
{
  for(int i=0;i<num&&prime[i]<=sqr;i++)
  {
    if(n%prime[i]==0){
	  factor[factor_num].count=0;
      factor[factor_num].prime_num=prime[i];
      while(n%prime[i]==0)
    {
      factor[factor_num].count++;
      n/=prime[i];
    }
	  factor_num++;
    }
  }
  return n;
}
int main()
{
  int n=0,num=0,m=0,sqr=0;//num是素数表的长度,m是除以所有素因子之后的n值
  scanf("%d",&n);
  if(n==1)printf("1=1");
  else{
  num=Prime_List();
  sqr=(int)sqrt(1.0*n);
  m=Find_Factor(sqr,num,n);
  if(m>1){
      factor[factor_num].prime_num=m;
      factor[factor_num++].count=1;
  }
  printf("%d=",n);
  for(int j=0;j<factor_num;j++)
  {
    if(factor[j].count!=1)
    {
    if(j==factor_num-1)printf("%d^%d",factor[j].prime_num,factor[j].count);
    else printf("%d^%d*",factor[j].prime_num,factor[j].count);
    }
    else{
    if(j==factor_num-1)printf("%d",factor[j].prime_num);
    else printf("%d*",factor[j].prime_num);
    }
  }
  }
  return 0;
}
